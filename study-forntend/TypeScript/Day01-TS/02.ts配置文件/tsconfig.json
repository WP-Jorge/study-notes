// 在当前目录下创建一个tsconfig.json 文件 tsc init 命令生成
// 命令行输入tsc -w 启动全局监控，保存后就直接编译

{
  /*
    tsconfig.json是ts的一个配置文件，ts可以通过它的配置信息对代码进行编译
    “include“ 用来指定哪些ts文件需要被编译
    "exclude" 不需要被编译的文件
      默认值：["node_modules", "bower_components", "jspm_packages"]
    "extends" 继承配置文件
  */
  "include": [
    "./src/**/*"
  ],
//  "exclude": [
//    "./src/hello/**/*"
//  ],

  /*
    compilerOptions: 编译器选项
  */
  "compilerOptions": {
    // target 用来指定ts被编译为ES的版本 默认ES3
    // 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'esnext'.

    "target": "ES6", // ESNext: 表示最新版本的es
    // module 指定要使用的模块化规范
    // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'esnext'.

    "module": "ES6",
    // lib 用来指定项目中要使用到的库
    // 'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'esnext', 'dom', 'dom.iterable',
    // 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'e
    // s2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.a
    // syncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.promi
    // se', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.str
    // ing', 'esnext.promise', 'esnext.weakref'.
    // "lib": ["asd"],

    // ourDir 用来指定编译后的文件所在目录
    "outDir": "./dist",

    // 将一个代码合并成一个文件
    // 设置outFile后，所有的全局作用域中的代码会合并到一个文件中
    // "outFile": "./dist/app.js"

    // 是否对js文件进行编译。默认false
    "allowJs": false,

    // 是否检查js代码语法是否规范 默认false
    "checkJs": false,

    // 是否移除注释 默认false
    "removeComments": false,

    // 不生成编译后的文件，只编译，不生成编译后的代码 默认false
    "noEmit": false,

    // 当有错误后不生成编译文件 默认 false
    "noEmitOnError": true,

    // 所有严格检查的总开关 默认false
    "strict": true,

    // 用来设置编译后的文件是否使用严格模式，编译后的js文件会加上 'use strict' 默认 false, 使用export import导入导出的时候就是默认严格模式
    "alwaysStrict": true,

    // 不允许隐式any 默认 false
    "noImplicitAny": true,

    // 不允许不明确类型的this 默认false
    "noImplicitThis": true,

    // 严格检查空值 默认false
    "strictNullChecks": true,

  }
}